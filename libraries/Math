Let‚Äôs break down the **`math` module in Python**‚Äîfrom scratch to advanced‚Äîwith real-world examples and automation-ready patterns, Saibabu-style: concise, modular, and manager-friendly.

---

## üß© What Is the `math` Module?

The `math` module provides access to **mathematical functions** like square roots, trigonometry, logarithms, and constants. It‚Äôs ideal for analytics, KPI calculations, and engineering-style automation.

```python
import math
```

---

## ü™ú LEVEL 1: **Basic Arithmetic Functions**

| Function         | Description                     | Example |
|------------------|----------------------------------|---------|
| `math.sqrt(x)`   | Square root                     | `math.sqrt(25)` ‚Üí 5.0 |
| `math.pow(x, y)` | Power (x^y)                     | `math.pow(2, 3)` ‚Üí 8.0 |
| `math.ceil(x)`   | Round up                        | `math.ceil(4.2)` ‚Üí 5 |
| `math.floor(x)`  | Round down                      | `math.floor(4.8)` ‚Üí 4 |
| `math.trunc(x)`  | Truncate decimal                | `math.trunc(4.9)` ‚Üí 4 |

---

## üìê LEVEL 2: **Trigonometry & Geometry**

| Function           | Description                     | Example |
|--------------------|----------------------------------|---------|
| `math.sin(x)`      | Sine (radians)                  | `math.sin(math.pi/2)` ‚Üí 1.0 |
| `math.cos(x)`      | Cosine                          | `math.cos(0)` ‚Üí 1.0 |
| `math.tan(x)`      | Tangent                         | `math.tan(math.pi/4)` ‚Üí ~1.0 |
| `math.radians(x)`  | Degrees ‚Üí Radians               | `math.radians(90)` ‚Üí 1.57 |
| `math.degrees(x)`  | Radians ‚Üí Degrees               | `math.degrees(math.pi)` ‚Üí 180.0 |

---

## üìä LEVEL 3: **Logarithmic & Exponential**

| Function           | Description                     | Example |
|--------------------|----------------------------------|---------|
| `math.exp(x)`      | e^x                             | `math.exp(2)` ‚Üí 7.389 |
| `math.log(x)`      | Natural log (base e)            | `math.log(10)` ‚Üí 2.302 |
| `math.log10(x)`    | Log base 10                     | `math.log10(100)` ‚Üí 2.0 |

---

## üß† LEVEL 4: **Constants & Precision**

| Constant           | Description                     | Value |
|--------------------|----------------------------------|--------|
| `math.pi`          | Pi                              | 3.14159‚Ä¶ |
| `math.e`           | Euler‚Äôs number                  | 2.71828‚Ä¶ |
| `math.inf`         | Infinity                        | `math.inf` |
| `math.nan`         | Not a Number                    | `math.nan` |

---

## üè¢ Real-World Use Case: KPI Calculator

```python
import math

def calculate_growth_rate(current, previous):
    if previous == 0:
        return math.inf
    return round(((current - previous) / previous) * 100, 2)

print(calculate_growth_rate(1200, 1000))  # Output: 20.0
```

---

## üß™ Advanced Pattern: Log-Scaled Report

```python
import math

values = [10, 100, 1000]
log_scaled = [math.log10(v) for v in values]
print(log_scaled)  # [1.0, 2.0, 3.0]
```

---

## üìã Summary Cheat Sheet

| Category         | Key Functions                     |
|------------------|-----------------------------------|
| Arithmetic       | `sqrt`, `pow`, `ceil`, `floor`    |
| Trigonometry     | `sin`, `cos`, `tan`, `radians`    |
| Logarithmic      | `log`, `log10`, `exp`             |
| Constants        | `pi`, `e`, `inf`, `nan`           |

---

Would you like a reusable KPI calculator module using `math`, `datetime`, and `pandas`? Or a cheat sheet formatted for manager-ready documentation?
