Absolutely, Saibabu! Here's a complete, structured guide to the **`datetime` module**â€”from scratch to advancedâ€”tailored for automation, reporting, and manager-ready Python scripts.

---

## ðŸ§© What Is `datetime`?

The `datetime` module lets you work with **dates**, **times**, and **timestamps**. Itâ€™s essential for logging, scheduling, time-based filtering, and report generation.

```python
import datetime
```

---

## ðŸªœ LEVEL 1: **Basics of `datetime`**

### âœ… Get Current Date and Time
```python
from datetime import datetime

now = datetime.now()
print(now)  # 2025-09-18 14:46:00.123456
```

### âœ… Get Only Date or Time
```python
print(now.date())  # 2025-09-18
print(now.time())  # 14:46:00.123456
```

### âœ… Create a Specific Date/Time
```python
dt = datetime(2025, 12, 25, 10, 30)
print(dt)  # 2025-12-25 10:30:00
```

---

## ðŸ“… LEVEL 2: **Working with `date`, `time`, and `timedelta`**

### âœ… Create a Date Object
```python
from datetime import date

d = date(2025, 9, 18)
print(d.year, d.month, d.day)
```

### âœ… Create a Time Object
```python
from datetime import time

t = time(14, 30, 15)
print(t.hour, t.minute, t.second)
```

### âœ… Time Difference with `timedelta`
```python
from datetime import timedelta

delta = timedelta(days=7)
future = now + delta
print(future)  # 7 days ahead
```

---

## ðŸ§ª LEVEL 3: **Formatting and Parsing Dates**

### âœ… Format `datetime` to String
```python
formatted = now.strftime('%Y-%m-%d %H:%M:%S')
print(formatted)  # '2025-09-18 14:46:00'
```

### âœ… Parse String to `datetime`
```python
dt_str = '2025-09-18 14:46:00'
parsed = datetime.strptime(dt_str, '%Y-%m-%d %H:%M:%S')
print(parsed)
```

---

## ðŸ§  LEVEL 4: **Advanced Automation Patterns**

### âœ… Auto-Generate Daily Report Filename
```python
filename = f"report_{datetime.now().strftime('%Y%m%d')}.csv"
print(filename)  # 'report_20250918.csv'
```

### âœ… Filter Rows by Date (with Pandas)
```python
import pandas as pd

df = pd.DataFrame({
    'date': pd.to_datetime(['2025-09-17', '2025-09-18']),
    'value': [100, 200]
})

today = pd.to_datetime(date.today())
filtered = df[df['date'] == today]
print(filtered)
```

### âœ… Schedule Cleanup for Files Older Than 7 Days
```python
import os
from datetime import datetime, timedelta

cutoff = datetime.now() - timedelta(days=7)

for file in os.listdir('logs'):
    path = os.path.join('logs', file)
    if os.path.isfile(path):
        mtime = datetime.fromtimestamp(os.path.getmtime(path))
        if mtime < cutoff:
            os.remove(path)
```

---

## ðŸ“‹ Summary Cheat Sheet

| Task                        | Code Snippet                              |
|-----------------------------|-------------------------------------------|
| Current datetime            | `datetime.now()`                          |
| Current date                | `date.today()`                            |
| Format to string            | `dt.strftime('%Y-%m-%d')`                 |
| Parse from string           | `datetime.strptime(str, format)`          |
| Add/subtract time           | `dt + timedelta(days=7)`                  |
| Compare dates               | `dt1 > dt2`                               |
| Timestamp from file         | `datetime.fromtimestamp(os.path.getmtime())` |

---

Would you like a reusable template for daily report generation and cleanup using `datetime`, `os`, and `pandas`? I can format it for manager-ready submission.
