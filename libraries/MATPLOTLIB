
## ðŸŽ¯ Overview of Matplotlib

- **Library**: `matplotlib`
- **Interface**: `pyplot` (MATLAB-style) and **Object-Oriented API**
- **Use Case**: Static, animated, and interactive visualizations
- **Integration**: Seamless with NumPy, Pandas, Jupyter, and GUI toolkits

---

## ðŸ§± Core Architecture: Figure â†’ Axes â†’ Axis

| Component | Description | Example |
|----------|-------------|---------|
| `Figure` | The entire canvas/window | `fig = plt.figure()` |
| `Axes`   | A single plot (can be multiple per figure) | `ax = fig.add_subplot(1,1,1)` |
| `Axis`   | X and Y axis objects inside `Axes` | `ax.set_xlim(0,10)` |

ðŸ”¹ Think of `Figure` as a page, `Axes` as a chart, and `Axis` as the scale.

---

## ðŸš€ Getting Started

```python
import matplotlib.pyplot as plt

x = [1, 2, 3, 4]
y = [10, 20, 25, 30]

plt.plot(x, y, label='Sales')
plt.title('Monthly Sales')
plt.xlabel('Month')
plt.ylabel('Revenue')
plt.legend()
plt.grid(True)
plt.show()
```

---

## ðŸ§  Object-Oriented Approach (Recommended for Modular Code)

```python
fig, ax = plt.subplots(figsize=(6,4))
ax.plot(x, y, color='green', linestyle='--', marker='o')
ax.set_title('Monthly Sales')
ax.set_xlabel('Month')
ax.set_ylabel('Revenue')
ax.grid(True)
plt.tight_layout()
plt.show()
```

---

## ðŸ“Š Plot Types with Examples

| Plot Type     | Code Snippet |
|---------------|--------------|
| Line Plot     | `ax.plot(x, y)` |
| Bar Chart     | `ax.bar(x, y)` |
| Histogram     | `ax.hist(data)` |
| Scatter Plot  | `ax.scatter(x, y)` |
| Pie Chart     | `ax.pie(values)` |
| Box Plot      | `ax.boxplot(data)` |
| 3D Plot       | `ax.plot_surface(X, Y, Z)` (via `mpl_toolkits.mplot3d`) |

---

## ðŸ§© Subplots and Layouts

```python
fig, axs = plt.subplots(2, 2, figsize=(8,6))
axs[0, 0].plot(x, y)
axs[0, 1].bar(x, y)
axs[1, 0].scatter(x, y)
axs[1, 1].hist(y)
plt.tight_layout()
plt.show()
```

---

## ðŸŽ¨ Styling and Customization

| Feature        | Example |
|----------------|---------|
| Line style     | `linestyle='--'` |
| Marker         | `marker='o'` |
| Color          | `color='red'` |
| Font size      | `fontsize=14` |
| Grid           | `ax.grid(True)` |
| Legend         | `ax.legend()` |
| Style sheet    | `plt.style.use('ggplot')` |

---

## ðŸ“¦ Saving and Exporting

```python
fig.savefig('sales_chart.png', dpi=300, bbox_inches='tight')
```

---

## ðŸ§  Advanced Features

- **Annotations**: `ax.annotate('Peak', xy=(3,25), xytext=(2,30), arrowprops=dict(facecolor='black'))`
- **Interactive Widgets**: `matplotlib.widgets`
- **Animations**: `matplotlib.animation.FuncAnimation`
- **Custom Ticks**: `ax.set_xticks([1,2,3])`, `ax.set_xticklabels(['Jan','Feb','Mar'])`
- **Transformations**: `ax.transData`, `ax.transAxes`

---

## ðŸ“š Recommended Learning Resources

- [GeeksforGeeks Matplotlib Tutorial](https://www.geeksforgeeks.org/python/matplotlib-tutorial/)
- [Matplotlib Official Tutorials](https://matplotlib.org/stable/tutorials/index.html)
- [DEV Guide: Matplotlib Explained](https://dev.to/suraj_kumar_fb57ae0928df2/matplotlib-explained-from-basics-to-advanced-charts-4f5e)

---

Would you like a cheat sheet or a workplace-ready use case (e.g., sales dashboard, performance tracker) using Matplotlib + Pandas?
