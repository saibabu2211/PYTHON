## 📁 Python File Handling: Complete Guide

### 🔹 1. What Is File Handling?
File handling allows you to **create**, **read**, **write**, **append**, and **delete** files using Python. It’s essential for:
- Logging user activity
- Reading configuration files
- Writing reports or results
- Processing data files (CSV, JSON, etc.)

---

### 🔹 2. File Modes

| Mode | Description                          |
|------|--------------------------------------|
| `'r'` | Read (default). Error if file not found |
| `'w'` | Write. Overwrites existing file       |
| `'a'` | Append. Adds to end of file           |
| `'x'` | Create. Error if file exists          |
| `'b'` | Binary mode (e.g., `'rb'`, `'wb'`)    |
| `'+'` | Read and write (e.g., `'r+'`, `'w+'`) |

---

### 🔹 3. Basic Operations

#### ✅ Open and Read
```python
with open('report.txt', 'r') as f:
    content = f.read()
    print(content)
```

#### ✅ Write to a File
```python
with open('log.txt', 'w') as f:
    f.write("Session started\n")
```

#### ✅ Append to a File
```python
with open('log.txt', 'a') as f:
    f.write("User logged in\n")
```

#### ✅ Read Line-by-Line
```python
with open('data.txt') as f:
    for line in f:
        print(line.strip())
```

---

### 🔹 4. Real-Time Use Case: Logging User Actions

```python
def log_action(user, action):
    with open('user_log.txt', 'a') as f:
        f.write(f"{user} performed {action}\n")

log_action("Saibabu", "Submitted report")
```

---

### 🔹 5. File Existence Check

```python
import os

if os.path.exists('data.txt'):
    print("File exists")
else:
    print("File not found")
```

---

### 🔹 6. Working with CSV Files

#### ✅ Read CSV
```python
import csv

with open('sales.csv') as f:
    reader = csv.DictReader(f)
    for row in reader:
        print(row['Amount'])
```

#### ✅ Write CSV
```python
import csv

data = [{'Name': 'Saibabu', 'Score': 95}, {'Name': 'Alex', 'Score': 88}]
with open('results.csv', 'w', newline='') as f:
    writer = csv.DictWriter(f, fieldnames=['Name', 'Score'])
    writer.writeheader()
    writer.writerows(data)
```

---

### 🔹 7. Working with JSON Files

#### ✅ Read JSON
```python
import json

with open('config.json') as f:
    config = json.load(f)
    print(config['version'])
```

#### ✅ Write JSON
```python
import json

settings = {'theme': 'dark', 'version': '1.2'}
with open('config.json', 'w') as f:
    json.dump(settings, f, indent=4)
```

---

### 🔹 8. Exception Handling in File Operations

```python
try:
    with open('missing.txt', 'r') as f:
        data = f.read()
except FileNotFoundError:
    print("File not found. Please check the path.")
```

---

### 🔹 9. Advanced: File Pointer Control

```python
with open('data.txt', 'r') as f:
    print(f.read(10))      # Read first 10 characters
    f.seek(0)              # Move pointer to start
    print(f.readline())    # Read one line
```

---

### 🔹 10. Real-World Mini Project: Config Loader

```python
import json
import os

def load_config(path):
    if not os.path.exists(path):
        raise FileNotFoundError("Config file missing")
    with open(path) as f:
        return json.load(f)

config = load_config('settings.json')
print(f"App version: {config['version']}")

Great choice, Saibabu! CSV files are everywhere in the real world — from sales reports to user data exports. Let’s break down **working with CSV files in Python** from beginner to advanced, with practical examples and modular clarity.

---

## 📊 Python CSV Handling: From Basics to Real-World

### 🔹 1. What Is a CSV File?
**CSV (Comma-Separated Values)** is a plain text format where each line is a data record, and each field is separated by a comma.

Example:
```
Name,Score,Grade
Saibabu,95,A
Alex,88,B
```

---

### 🔹 2. Reading CSV Files

#### ✅ Basic Read
```python
import csv

with open('students.csv', 'r') as f:
    reader = csv.reader(f)
    for row in reader:
        print(row)
```

#### ✅ Read with Headers (DictReader)
```python
import csv

with open('students.csv', 'r') as f:
    reader = csv.DictReader(f)
    for row in reader:
        print(f"{row['Name']} scored {row['Score']}")
```

---

### 🔹 3. Writing to CSV Files

#### ✅ Basic Write
```python
import csv

data = [['Name', 'Score'], ['Saibabu', 95], ['Alex', 88]]
with open('results.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerows(data)
```

#### ✅ Write with Headers (DictWriter)
```python
import csv

data = [{'Name': 'Saibabu', 'Score': 95}, {'Name': 'Alex', 'Score': 88}]
with open('results.csv', 'w', newline='') as f:
    writer = csv.DictWriter(f, fieldnames=['Name', 'Score'])
    writer.writeheader()
    writer.writerows(data)
```

---

### 🔹 4. Real-Time Use Case: Sales Report Analyzer

```python
import csv

def total_sales(file_path):
    total = 0
    with open(file_path, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            total += float(row['Amount'])
    return total

print("💰 Total Sales:", total_sales('sales.csv'))
```

---

### 🔹 5. Filtering Rows

```python
def high_scores(file_path, threshold):
    with open(file_path, 'r') as f:
        reader = csv.DictReader(f)
        return [row for row in reader if int(row['Score']) > threshold]

for student in high_scores('students.csv', 90):
    print(student)
```

---

### 🔹 6. Updating CSV (Read → Modify → Write)

```python
def update_grades(file_path):
    updated = []
    with open(file_path, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            row['Grade'] = 'A' if int(row['Score']) >= 90 else 'B'
            updated.append(row)

    with open(file_path, 'w', newline='') as f:
        writer = csv.DictWriter(f, fieldnames=['Name', 'Score', 'Grade'])
        writer.writeheader()
        writer.writerows(updated)

update_grades('students.csv')
```

---

### 🔹 7. Advanced Tips

| Feature           | Use Case                            |
|-------------------|-------------------------------------|
| `newline=''`      | Prevents blank lines on Windows     |
| `quotechar='"'`   | Wraps fields with quotes            |
| `delimiter=';'`   | For semicolon-separated files       |
| `encoding='utf-8'`| Handles special characters          |

---

Absolutely, Saibabu! Let’s explore **Advanced File Pointer Control** — a powerful technique for navigating and manipulating file content precisely. This is especially useful when working with large files, logs, or binary data.

---

## 🧭 9. Advanced: File Pointer Control in Python

### 🔹 What Is a File Pointer?
A **file pointer** is the current position in the file where reading or writing will happen. Python lets you control this using:

- `f.tell()` → Get current position
- `f.seek(offset, whence)` → Move pointer

---

### 🔹 `f.tell()` — Get Current Position

```python
with open('data.txt', 'r') as f:
    print(f.read(5))       # Reads first 5 characters
    print(f.tell())        # Shows position (should be 5)
```

---

### 🔹 `f.seek(offset, whence)` — Move Pointer

| `whence` | Meaning                     |
|----------|-----------------------------|
| `0`      | From start of file          |
| `1`      | From current position       |
| `2`      | From end of file            |

#### ✅ Example: Move to Start
```python
f.seek(0)  # Move to beginning
```

#### ✅ Example: Skip First 10 Bytes
```python
f.seek(10, 0)  # Move 10 bytes from start
```

#### ✅ Example: Move Backwards
```python
f.seek(-5, 2)  # Move 5 bytes before end
```

---

### 🔹 Real-Time Use Case: Read Last N Characters of a File

```python
def read_last_chars(file_path, n):
    with open(file_path, 'rb') as f:
        f.seek(-n, 2)  # Move to n bytes before end
        return f.read().decode()

print(read_last_chars('log.txt', 50))
```

---

### 🔹 Use Case: Skip Header and Read Data

```python
with open('report.txt', 'r') as f:
    f.readline()         # Skip header
    f.seek(f.tell())     # Confirm position
    for line in f:
        print(line.strip())
```

---

### 🔹 Use Case: Overwrite Specific Part of a File

```python
with open('data.txt', 'r+') as f:
    f.seek(10)           # Move to position 10
    f.write("UPDATED")   # Overwrite from there
```

---

### 🔹 Binary File Navigation

```python
with open('image.jpg', 'rb') as f:
    f.seek(1000)         # Jump to byte 1000
    chunk = f.read(100)  # Read next 100 bytes
```

---

### 🧠 Tips
- Always use `'rb'` or `'r+'` for binary or overwrite operations.
- Use `f.seek(0)` to reset pointer before re-reading.
- Combine with `os.path.getsize()` to navigate large files.

---

Would you like to turn this into a Copilot Page for editing and reuse? Or shall we build a mini project like a **log viewer with seek control** next?
